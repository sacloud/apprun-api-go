// Copyright 2021-2024 The sacloud/apprun-api-go authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package v1

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// アプリケーション一覧を取得します。
	// (GET /applications)
	ListApplications(c *gin.Context, params ListApplicationsParams)
	// アプリケーションを作成します。
	// (POST /applications)
	PostApplication(c *gin.Context)
	// アプリケーションを削除します。
	// (DELETE /applications/{id})
	DeleteApplication(c *gin.Context, id string)
	// アプリケーション詳細を取得します。
	// (GET /applications/{id})
	GetApplication(c *gin.Context, id string)
	// アプリケーションを部分的に変更します。
	// (PATCH /applications/{id})
	PatchApplication(c *gin.Context, id string)
	// アプリケーションステータスを取得します。
	// (GET /applications/{id}/status)
	GetApplicationStatus(c *gin.Context, id string)
	// アプリケーショントラフィック分散を取得します。
	// (GET /applications/{id}/traffics)
	ListApplicationTraffics(c *gin.Context, id string)
	// アプリケーショントラフィック分散を変更します。
	// (PUT /applications/{id}/traffics)
	PutApplicationTraffic(c *gin.Context, id string)
	// アプリケーションバージョン一覧を取得します。
	// (GET /applications/{id}/versions)
	ListApplicationVersions(c *gin.Context, id string, params ListApplicationVersionsParams)
	// アプリケーションバージョンを削除します。
	// (DELETE /applications/{id}/versions/{version_id})
	DeleteApplicationVersion(c *gin.Context, id string, versionId string)
	// アプリケーションバージョン詳細を取得します。
	// (GET /applications/{id}/versions/{version_id})
	GetApplicationVersion(c *gin.Context, id string, versionId string)

	// (GET /user)
	GetUser(c *gin.Context)

	// (POST /user)
	PostUser(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ListApplications operation middleware
func (siw *ServerInterfaceWrapper) ListApplications(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListApplicationsParams

	// ------------- Optional query parameter "page_num" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_num", c.Request.URL.Query(), &params.PageNum)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_num: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sort_field" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_field", c.Request.URL.Query(), &params.SortField)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sort_field: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sort_order" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_order", c.Request.URL.Query(), &params.SortOrder)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sort_order: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListApplications(c, params)
}

// PostApplication operation middleware
func (siw *ServerInterfaceWrapper) PostApplication(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApplication(c)
}

// DeleteApplication operation middleware
func (siw *ServerInterfaceWrapper) DeleteApplication(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteApplication(c, id)
}

// GetApplication operation middleware
func (siw *ServerInterfaceWrapper) GetApplication(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApplication(c, id)
}

// PatchApplication operation middleware
func (siw *ServerInterfaceWrapper) PatchApplication(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PatchApplication(c, id)
}

// GetApplicationStatus operation middleware
func (siw *ServerInterfaceWrapper) GetApplicationStatus(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApplicationStatus(c, id)
}

// ListApplicationTraffics operation middleware
func (siw *ServerInterfaceWrapper) ListApplicationTraffics(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListApplicationTraffics(c, id)
}

// PutApplicationTraffic operation middleware
func (siw *ServerInterfaceWrapper) PutApplicationTraffic(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutApplicationTraffic(c, id)
}

// ListApplicationVersions operation middleware
func (siw *ServerInterfaceWrapper) ListApplicationVersions(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListApplicationVersionsParams

	// ------------- Optional query parameter "page_num" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_num", c.Request.URL.Query(), &params.PageNum)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_num: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sort_field" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_field", c.Request.URL.Query(), &params.SortField)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sort_field: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sort_order" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_order", c.Request.URL.Query(), &params.SortOrder)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sort_order: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListApplicationVersions(c, id, params)
}

// DeleteApplicationVersion operation middleware
func (siw *ServerInterfaceWrapper) DeleteApplicationVersion(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "version_id" -------------
	var versionId string

	err = runtime.BindStyledParameterWithOptions("simple", "version_id", c.Param("version_id"), &versionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter version_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteApplicationVersion(c, id, versionId)
}

// GetApplicationVersion operation middleware
func (siw *ServerInterfaceWrapper) GetApplicationVersion(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "version_id" -------------
	var versionId string

	err = runtime.BindStyledParameterWithOptions("simple", "version_id", c.Param("version_id"), &versionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter version_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApplicationVersion(c, id, versionId)
}

// GetUser operation middleware
func (siw *ServerInterfaceWrapper) GetUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUser(c)
}

// PostUser operation middleware
func (siw *ServerInterfaceWrapper) PostUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostUser(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/applications", wrapper.ListApplications)
	router.POST(options.BaseURL+"/applications", wrapper.PostApplication)
	router.DELETE(options.BaseURL+"/applications/:id", wrapper.DeleteApplication)
	router.GET(options.BaseURL+"/applications/:id", wrapper.GetApplication)
	router.PATCH(options.BaseURL+"/applications/:id", wrapper.PatchApplication)
	router.GET(options.BaseURL+"/applications/:id/status", wrapper.GetApplicationStatus)
	router.GET(options.BaseURL+"/applications/:id/traffics", wrapper.ListApplicationTraffics)
	router.PUT(options.BaseURL+"/applications/:id/traffics", wrapper.PutApplicationTraffic)
	router.GET(options.BaseURL+"/applications/:id/versions", wrapper.ListApplicationVersions)
	router.DELETE(options.BaseURL+"/applications/:id/versions/:version_id", wrapper.DeleteApplicationVersion)
	router.GET(options.BaseURL+"/applications/:id/versions/:version_id", wrapper.GetApplicationVersion)
	router.GET(options.BaseURL+"/user", wrapper.GetUser)
	router.POST(options.BaseURL+"/user", wrapper.PostUser)
}
