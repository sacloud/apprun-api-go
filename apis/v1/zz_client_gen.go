// Copyright 2021-2024 The sacloud/apprun-api-go authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package v1

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ListApplications request
	ListApplications(ctx context.Context, params *ListApplicationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApplicationWithBody request with any body
	PostApplicationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApplication(ctx context.Context, body PostApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApplication request
	DeleteApplication(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApplication request
	GetApplication(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchApplicationWithBody request with any body
	PatchApplicationWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchApplication(ctx context.Context, id string, body PatchApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApplicationStatus request
	GetApplicationStatus(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListApplicationTraffics request
	ListApplicationTraffics(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApplicationTrafficWithBody request with any body
	PutApplicationTrafficWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApplicationTraffic(ctx context.Context, id string, body PutApplicationTrafficJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListApplicationVersions request
	ListApplicationVersions(ctx context.Context, id string, params *ListApplicationVersionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApplicationVersion request
	DeleteApplicationVersion(ctx context.Context, id string, versionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApplicationVersion request
	GetApplicationVersion(ctx context.Context, id string, versionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUser request
	GetUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUser request
	PostUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ListApplications(ctx context.Context, params *ListApplicationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListApplicationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApplicationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApplicationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApplication(ctx context.Context, body PostApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApplicationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApplication(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApplicationRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApplication(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApplicationRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApplicationWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApplicationRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApplication(ctx context.Context, id string, body PatchApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApplicationRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApplicationStatus(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApplicationStatusRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListApplicationTraffics(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListApplicationTrafficsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApplicationTrafficWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApplicationTrafficRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApplicationTraffic(ctx context.Context, id string, body PutApplicationTrafficJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApplicationTrafficRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListApplicationVersions(ctx context.Context, id string, params *ListApplicationVersionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListApplicationVersionsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApplicationVersion(ctx context.Context, id string, versionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApplicationVersionRequest(c.Server, id, versionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApplicationVersion(ctx context.Context, id string, versionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApplicationVersionRequest(c.Server, id, versionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewListApplicationsRequest generates requests for ListApplications
func NewListApplicationsRequest(server string, params *ListApplicationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageNum != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_num", runtime.ParamLocationQuery, *params.PageNum); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortField != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_field", runtime.ParamLocationQuery, *params.SortField); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_order", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApplicationRequest calls the generic PostApplication builder with application/json body
func NewPostApplicationRequest(server string, body PostApplicationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApplicationRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApplicationRequestWithBody generates requests for PostApplication with any type of body
func NewPostApplicationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApplicationRequest generates requests for DeleteApplication
func NewDeleteApplicationRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApplicationRequest generates requests for GetApplication
func NewGetApplicationRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchApplicationRequest calls the generic PatchApplication builder with application/json body
func NewPatchApplicationRequest(server string, id string, body PatchApplicationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchApplicationRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPatchApplicationRequestWithBody generates requests for PatchApplication with any type of body
func NewPatchApplicationRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApplicationStatusRequest generates requests for GetApplicationStatus
func NewGetApplicationStatusRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListApplicationTrafficsRequest generates requests for ListApplicationTraffics
func NewListApplicationTrafficsRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/traffics", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApplicationTrafficRequest calls the generic PutApplicationTraffic builder with application/json body
func NewPutApplicationTrafficRequest(server string, id string, body PutApplicationTrafficJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApplicationTrafficRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutApplicationTrafficRequestWithBody generates requests for PutApplicationTraffic with any type of body
func NewPutApplicationTrafficRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/traffics", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListApplicationVersionsRequest generates requests for ListApplicationVersions
func NewListApplicationVersionsRequest(server string, id string, params *ListApplicationVersionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/versions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageNum != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_num", runtime.ParamLocationQuery, *params.PageNum); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortField != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_field", runtime.ParamLocationQuery, *params.SortField); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_order", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApplicationVersionRequest generates requests for DeleteApplicationVersion
func NewDeleteApplicationVersionRequest(server string, id string, versionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "version_id", runtime.ParamLocationPath, versionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/versions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApplicationVersionRequest generates requests for GetApplicationVersion
func NewGetApplicationVersionRequest(server string, id string, versionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "version_id", runtime.ParamLocationPath, versionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/versions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserRequest generates requests for GetUser
func NewGetUserRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUserRequest generates requests for PostUser
func NewPostUserRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListApplications request
	ListApplicationsWithResponse(ctx context.Context, params *ListApplicationsParams, reqEditors ...RequestEditorFn) (*ListApplicationsResponse, error)

	// PostApplication request with any body
	PostApplicationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApplicationResponse, error)

	PostApplicationWithResponse(ctx context.Context, body PostApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApplicationResponse, error)

	// DeleteApplication request
	DeleteApplicationWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteApplicationResponse, error)

	// GetApplication request
	GetApplicationWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetApplicationResponse, error)

	// PatchApplication request with any body
	PatchApplicationWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApplicationResponse, error)

	PatchApplicationWithResponse(ctx context.Context, id string, body PatchApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApplicationResponse, error)

	// GetApplicationStatus request
	GetApplicationStatusWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetApplicationStatusResponse, error)

	// ListApplicationTraffics request
	ListApplicationTrafficsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ListApplicationTrafficsResponse, error)

	// PutApplicationTraffic request with any body
	PutApplicationTrafficWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApplicationTrafficResponse, error)

	PutApplicationTrafficWithResponse(ctx context.Context, id string, body PutApplicationTrafficJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApplicationTrafficResponse, error)

	// ListApplicationVersions request
	ListApplicationVersionsWithResponse(ctx context.Context, id string, params *ListApplicationVersionsParams, reqEditors ...RequestEditorFn) (*ListApplicationVersionsResponse, error)

	// DeleteApplicationVersion request
	DeleteApplicationVersionWithResponse(ctx context.Context, id string, versionId string, reqEditors ...RequestEditorFn) (*DeleteApplicationVersionResponse, error)

	// GetApplicationVersion request
	GetApplicationVersionWithResponse(ctx context.Context, id string, versionId string, reqEditors ...RequestEditorFn) (*GetApplicationVersionResponse, error)

	// GetUser request
	GetUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserResponse, error)

	// PostUser request
	PostUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostUserResponse, error)
}

type ListApplicationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HandlerListApplications
	JSON400      *ModelAppRunError
	JSON401      *ModelAppRunError
	JSON403      *ModelAppRunError
	JSON500      *ModelAppRunError
}

// Status returns HTTPResponse.Status
func (r ListApplicationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListApplicationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Result JSON200の結果、もしくは発生したエラーのいずれかを返す
func (r ListApplicationsResponse) Result() (*HandlerListApplications, error) {
	return r.JSON200, eCoalesce(r.JSON400, r.JSON401, r.JSON403, r.JSON500, r.UndefinedError())
}

// UndefinedError API定義で未定義なエラーステータスコードを受け取った場合にエラーを返す
func (r ListApplicationsResponse) UndefinedError() error {
	if !isOKStatus(r.HTTPResponse.StatusCode) {
		return fmt.Errorf("unknown error: code:%d, body:%s", r.HTTPResponse.StatusCode, string(r.Body))
	}
	return nil
}

type PostApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *HandlerPostApplication
	JSON400      *ModelAppRunError
	JSON401      *ModelAppRunError
	JSON403      *ModelAppRunError
	JSON409      *ModelAppRunError
	JSON500      *ModelAppRunError
}

// Status returns HTTPResponse.Status
func (r PostApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Result JSON200の結果、もしくは発生したエラーのいずれかを返す
func (r PostApplicationResponse) Result() (*HandlerPostApplication, error) {
	return r.JSON201, eCoalesce(r.JSON400, r.JSON401, r.JSON403, r.JSON409, r.JSON500, r.UndefinedError())
}

// UndefinedError API定義で未定義なエラーステータスコードを受け取った場合にエラーを返す
func (r PostApplicationResponse) UndefinedError() error {
	if !isOKStatus(r.HTTPResponse.StatusCode) {
		return fmt.Errorf("unknown error: code:%d, body:%s", r.HTTPResponse.StatusCode, string(r.Body))
	}
	return nil
}

type DeleteApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ModelAppRunError
	JSON401      *ModelAppRunError
	JSON403      *ModelAppRunError
	JSON404      *ModelAppRunError
	JSON500      *ModelAppRunError
}

// Status returns HTTPResponse.Status
func (r DeleteApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Result JSON200の結果、もしくは発生したエラーのいずれかを返す
func (r DeleteApplicationResponse) Result() error {
	return eCoalesce(r.JSON400, r.JSON401, r.JSON403, r.JSON404, r.JSON500, r.UndefinedError())
}

// UndefinedError API定義で未定義なエラーステータスコードを受け取った場合にエラーを返す
func (r DeleteApplicationResponse) UndefinedError() error {
	if !isOKStatus(r.HTTPResponse.StatusCode) {
		return fmt.Errorf("unknown error: code:%d, body:%s", r.HTTPResponse.StatusCode, string(r.Body))
	}
	return nil
}

type GetApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HandlerGetApplication
	JSON400      *ModelAppRunError
	JSON401      *ModelAppRunError
	JSON403      *ModelAppRunError
	JSON404      *ModelAppRunError
	JSON500      *ModelAppRunError
}

// Status returns HTTPResponse.Status
func (r GetApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Result JSON200の結果、もしくは発生したエラーのいずれかを返す
func (r GetApplicationResponse) Result() (*HandlerGetApplication, error) {
	return r.JSON200, eCoalesce(r.JSON400, r.JSON401, r.JSON403, r.JSON404, r.JSON500, r.UndefinedError())
}

// UndefinedError API定義で未定義なエラーステータスコードを受け取った場合にエラーを返す
func (r GetApplicationResponse) UndefinedError() error {
	if !isOKStatus(r.HTTPResponse.StatusCode) {
		return fmt.Errorf("unknown error: code:%d, body:%s", r.HTTPResponse.StatusCode, string(r.Body))
	}
	return nil
}

type PatchApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HandlerPatchApplication
	JSON400      *ModelAppRunError
	JSON401      *ModelAppRunError
	JSON403      *ModelAppRunError
	JSON404      *ModelAppRunError
	JSON409      *ModelAppRunError
	JSON500      *ModelAppRunError
}

// Status returns HTTPResponse.Status
func (r PatchApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Result JSON200の結果、もしくは発生したエラーのいずれかを返す
func (r PatchApplicationResponse) Result() (*HandlerPatchApplication, error) {
	return r.JSON200, eCoalesce(r.JSON400, r.JSON401, r.JSON403, r.JSON404, r.JSON409, r.JSON500, r.UndefinedError())
}

// UndefinedError API定義で未定義なエラーステータスコードを受け取った場合にエラーを返す
func (r PatchApplicationResponse) UndefinedError() error {
	if !isOKStatus(r.HTTPResponse.StatusCode) {
		return fmt.Errorf("unknown error: code:%d, body:%s", r.HTTPResponse.StatusCode, string(r.Body))
	}
	return nil
}

type GetApplicationStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HandlerGetApplicationStatusResponse
	JSON400      *ModelAppRunError
	JSON401      *ModelAppRunError
	JSON403      *ModelAppRunError
	JSON404      *ModelAppRunError
	JSON500      *ModelAppRunError
}

// Status returns HTTPResponse.Status
func (r GetApplicationStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApplicationStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Result JSON200の結果、もしくは発生したエラーのいずれかを返す
func (r GetApplicationStatusResponse) Result() (*HandlerGetApplicationStatusResponse, error) {
	return r.JSON200, eCoalesce(r.JSON400, r.JSON401, r.JSON403, r.JSON404, r.JSON500, r.UndefinedError())
}

// UndefinedError API定義で未定義なエラーステータスコードを受け取った場合にエラーを返す
func (r GetApplicationStatusResponse) UndefinedError() error {
	if !isOKStatus(r.HTTPResponse.StatusCode) {
		return fmt.Errorf("unknown error: code:%d, body:%s", r.HTTPResponse.StatusCode, string(r.Body))
	}
	return nil
}

type ListApplicationTrafficsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HandlerListTraffics
	JSON400      *ModelAppRunError
	JSON401      *ModelAppRunError
	JSON403      *ModelAppRunError
	JSON404      *ModelAppRunError
	JSON500      *ModelAppRunError
}

// Status returns HTTPResponse.Status
func (r ListApplicationTrafficsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListApplicationTrafficsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Result JSON200の結果、もしくは発生したエラーのいずれかを返す
func (r ListApplicationTrafficsResponse) Result() (*HandlerListTraffics, error) {
	return r.JSON200, eCoalesce(r.JSON400, r.JSON401, r.JSON403, r.JSON404, r.JSON500, r.UndefinedError())
}

// UndefinedError API定義で未定義なエラーステータスコードを受け取った場合にエラーを返す
func (r ListApplicationTrafficsResponse) UndefinedError() error {
	if !isOKStatus(r.HTTPResponse.StatusCode) {
		return fmt.Errorf("unknown error: code:%d, body:%s", r.HTTPResponse.StatusCode, string(r.Body))
	}
	return nil
}

type PutApplicationTrafficResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HandlerPutTraffics
	JSON400      *ModelAppRunError
	JSON401      *ModelAppRunError
	JSON403      *ModelAppRunError
	JSON404      *ModelAppRunError
	JSON500      *ModelAppRunError
}

// Status returns HTTPResponse.Status
func (r PutApplicationTrafficResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApplicationTrafficResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Result JSON200の結果、もしくは発生したエラーのいずれかを返す
func (r PutApplicationTrafficResponse) Result() (*HandlerPutTraffics, error) {
	return r.JSON200, eCoalesce(r.JSON400, r.JSON401, r.JSON403, r.JSON404, r.JSON500, r.UndefinedError())
}

// UndefinedError API定義で未定義なエラーステータスコードを受け取った場合にエラーを返す
func (r PutApplicationTrafficResponse) UndefinedError() error {
	if !isOKStatus(r.HTTPResponse.StatusCode) {
		return fmt.Errorf("unknown error: code:%d, body:%s", r.HTTPResponse.StatusCode, string(r.Body))
	}
	return nil
}

type ListApplicationVersionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HandlerListVersions
	JSON400      *ModelAppRunError
	JSON401      *ModelAppRunError
	JSON403      *ModelAppRunError
	JSON404      *ModelAppRunError
	JSON500      *ModelAppRunError
}

// Status returns HTTPResponse.Status
func (r ListApplicationVersionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListApplicationVersionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Result JSON200の結果、もしくは発生したエラーのいずれかを返す
func (r ListApplicationVersionsResponse) Result() (*HandlerListVersions, error) {
	return r.JSON200, eCoalesce(r.JSON400, r.JSON401, r.JSON403, r.JSON404, r.JSON500, r.UndefinedError())
}

// UndefinedError API定義で未定義なエラーステータスコードを受け取った場合にエラーを返す
func (r ListApplicationVersionsResponse) UndefinedError() error {
	if !isOKStatus(r.HTTPResponse.StatusCode) {
		return fmt.Errorf("unknown error: code:%d, body:%s", r.HTTPResponse.StatusCode, string(r.Body))
	}
	return nil
}

type DeleteApplicationVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ModelAppRunError
	JSON401      *ModelAppRunError
	JSON403      *ModelAppRunError
	JSON404      *ModelAppRunError
	JSON500      *ModelAppRunError
}

// Status returns HTTPResponse.Status
func (r DeleteApplicationVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApplicationVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Result JSON200の結果、もしくは発生したエラーのいずれかを返す
func (r DeleteApplicationVersionResponse) Result() error {
	return eCoalesce(r.JSON400, r.JSON401, r.JSON403, r.JSON404, r.JSON500, r.UndefinedError())
}

// UndefinedError API定義で未定義なエラーステータスコードを受け取った場合にエラーを返す
func (r DeleteApplicationVersionResponse) UndefinedError() error {
	if !isOKStatus(r.HTTPResponse.StatusCode) {
		return fmt.Errorf("unknown error: code:%d, body:%s", r.HTTPResponse.StatusCode, string(r.Body))
	}
	return nil
}

type GetApplicationVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HandlerGetVersion
	JSON400      *ModelAppRunError
	JSON401      *ModelAppRunError
	JSON403      *ModelAppRunError
	JSON404      *ModelAppRunError
	JSON500      *ModelAppRunError
}

// Status returns HTTPResponse.Status
func (r GetApplicationVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApplicationVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Result JSON200の結果、もしくは発生したエラーのいずれかを返す
func (r GetApplicationVersionResponse) Result() (*HandlerGetVersion, error) {
	return r.JSON200, eCoalesce(r.JSON400, r.JSON401, r.JSON403, r.JSON404, r.JSON500, r.UndefinedError())
}

// UndefinedError API定義で未定義なエラーステータスコードを受け取った場合にエラーを返す
func (r GetApplicationVersionResponse) UndefinedError() error {
	if !isOKStatus(r.HTTPResponse.StatusCode) {
		return fmt.Errorf("unknown error: code:%d, body:%s", r.HTTPResponse.StatusCode, string(r.Body))
	}
	return nil
}

type GetUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *ModelAppRunError
	JSON403      *ModelAppRunError
	JSON404      *ModelAppRunError
	JSON500      *ModelAppRunError
}

// Status returns HTTPResponse.Status
func (r GetUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Result JSON200の結果、もしくは発生したエラーのいずれかを返す
func (r GetUserResponse) Result() error {
	return eCoalesce(r.JSON401, r.JSON403, r.JSON404, r.JSON500, r.UndefinedError())
}

// UndefinedError API定義で未定義なエラーステータスコードを受け取った場合にエラーを返す
func (r GetUserResponse) UndefinedError() error {
	if !isOKStatus(r.HTTPResponse.StatusCode) {
		return fmt.Errorf("unknown error: code:%d, body:%s", r.HTTPResponse.StatusCode, string(r.Body))
	}
	return nil
}

type PostUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *ModelAppRunError
	JSON403      *ModelAppRunError
	JSON409      *ModelAppRunError
	JSON500      *ModelAppRunError
}

// Status returns HTTPResponse.Status
func (r PostUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Result JSON200の結果、もしくは発生したエラーのいずれかを返す
func (r PostUserResponse) Result() error {
	return eCoalesce(r.JSON401, r.JSON403, r.JSON409, r.JSON500, r.UndefinedError())
}

// UndefinedError API定義で未定義なエラーステータスコードを受け取った場合にエラーを返す
func (r PostUserResponse) UndefinedError() error {
	if !isOKStatus(r.HTTPResponse.StatusCode) {
		return fmt.Errorf("unknown error: code:%d, body:%s", r.HTTPResponse.StatusCode, string(r.Body))
	}
	return nil
}

// ListApplicationsWithResponse request returning *ListApplicationsResponse
func (c *ClientWithResponses) ListApplicationsWithResponse(ctx context.Context, params *ListApplicationsParams, reqEditors ...RequestEditorFn) (*ListApplicationsResponse, error) {
	rsp, err := c.ListApplications(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListApplicationsResponse(rsp)
}

// PostApplicationWithBodyWithResponse request with arbitrary body returning *PostApplicationResponse
func (c *ClientWithResponses) PostApplicationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApplicationResponse, error) {
	rsp, err := c.PostApplicationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApplicationResponse(rsp)
}

func (c *ClientWithResponses) PostApplicationWithResponse(ctx context.Context, body PostApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApplicationResponse, error) {
	rsp, err := c.PostApplication(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApplicationResponse(rsp)
}

// DeleteApplicationWithResponse request returning *DeleteApplicationResponse
func (c *ClientWithResponses) DeleteApplicationWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteApplicationResponse, error) {
	rsp, err := c.DeleteApplication(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApplicationResponse(rsp)
}

// GetApplicationWithResponse request returning *GetApplicationResponse
func (c *ClientWithResponses) GetApplicationWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetApplicationResponse, error) {
	rsp, err := c.GetApplication(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApplicationResponse(rsp)
}

// PatchApplicationWithBodyWithResponse request with arbitrary body returning *PatchApplicationResponse
func (c *ClientWithResponses) PatchApplicationWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApplicationResponse, error) {
	rsp, err := c.PatchApplicationWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApplicationResponse(rsp)
}

func (c *ClientWithResponses) PatchApplicationWithResponse(ctx context.Context, id string, body PatchApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApplicationResponse, error) {
	rsp, err := c.PatchApplication(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApplicationResponse(rsp)
}

// GetApplicationStatusWithResponse request returning *GetApplicationStatusResponse
func (c *ClientWithResponses) GetApplicationStatusWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetApplicationStatusResponse, error) {
	rsp, err := c.GetApplicationStatus(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApplicationStatusResponse(rsp)
}

// ListApplicationTrafficsWithResponse request returning *ListApplicationTrafficsResponse
func (c *ClientWithResponses) ListApplicationTrafficsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ListApplicationTrafficsResponse, error) {
	rsp, err := c.ListApplicationTraffics(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListApplicationTrafficsResponse(rsp)
}

// PutApplicationTrafficWithBodyWithResponse request with arbitrary body returning *PutApplicationTrafficResponse
func (c *ClientWithResponses) PutApplicationTrafficWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApplicationTrafficResponse, error) {
	rsp, err := c.PutApplicationTrafficWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApplicationTrafficResponse(rsp)
}

func (c *ClientWithResponses) PutApplicationTrafficWithResponse(ctx context.Context, id string, body PutApplicationTrafficJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApplicationTrafficResponse, error) {
	rsp, err := c.PutApplicationTraffic(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApplicationTrafficResponse(rsp)
}

// ListApplicationVersionsWithResponse request returning *ListApplicationVersionsResponse
func (c *ClientWithResponses) ListApplicationVersionsWithResponse(ctx context.Context, id string, params *ListApplicationVersionsParams, reqEditors ...RequestEditorFn) (*ListApplicationVersionsResponse, error) {
	rsp, err := c.ListApplicationVersions(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListApplicationVersionsResponse(rsp)
}

// DeleteApplicationVersionWithResponse request returning *DeleteApplicationVersionResponse
func (c *ClientWithResponses) DeleteApplicationVersionWithResponse(ctx context.Context, id string, versionId string, reqEditors ...RequestEditorFn) (*DeleteApplicationVersionResponse, error) {
	rsp, err := c.DeleteApplicationVersion(ctx, id, versionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApplicationVersionResponse(rsp)
}

// GetApplicationVersionWithResponse request returning *GetApplicationVersionResponse
func (c *ClientWithResponses) GetApplicationVersionWithResponse(ctx context.Context, id string, versionId string, reqEditors ...RequestEditorFn) (*GetApplicationVersionResponse, error) {
	rsp, err := c.GetApplicationVersion(ctx, id, versionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApplicationVersionResponse(rsp)
}

// GetUserWithResponse request returning *GetUserResponse
func (c *ClientWithResponses) GetUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserResponse, error) {
	rsp, err := c.GetUser(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserResponse(rsp)
}

// PostUserWithResponse request returning *PostUserResponse
func (c *ClientWithResponses) PostUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostUserResponse, error) {
	rsp, err := c.PostUser(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserResponse(rsp)
}

// ParseListApplicationsResponse parses an HTTP response from a ListApplicationsWithResponse call
func ParseListApplicationsResponse(rsp *http.Response) (*ListApplicationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListApplicationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HandlerListApplications
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ModelAppRunError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ModelAppRunError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ModelAppRunError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ModelAppRunError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApplicationResponse parses an HTTP response from a PostApplicationWithResponse call
func ParsePostApplicationResponse(rsp *http.Response) (*PostApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest HandlerPostApplication
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ModelAppRunError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ModelAppRunError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ModelAppRunError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ModelAppRunError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ModelAppRunError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteApplicationResponse parses an HTTP response from a DeleteApplicationWithResponse call
func ParseDeleteApplicationResponse(rsp *http.Response) (*DeleteApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ModelAppRunError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ModelAppRunError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ModelAppRunError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ModelAppRunError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ModelAppRunError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApplicationResponse parses an HTTP response from a GetApplicationWithResponse call
func ParseGetApplicationResponse(rsp *http.Response) (*GetApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HandlerGetApplication
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ModelAppRunError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ModelAppRunError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ModelAppRunError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ModelAppRunError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ModelAppRunError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePatchApplicationResponse parses an HTTP response from a PatchApplicationWithResponse call
func ParsePatchApplicationResponse(rsp *http.Response) (*PatchApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HandlerPatchApplication
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ModelAppRunError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ModelAppRunError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ModelAppRunError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ModelAppRunError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ModelAppRunError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ModelAppRunError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApplicationStatusResponse parses an HTTP response from a GetApplicationStatusWithResponse call
func ParseGetApplicationStatusResponse(rsp *http.Response) (*GetApplicationStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApplicationStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HandlerGetApplicationStatusResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ModelAppRunError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ModelAppRunError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ModelAppRunError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ModelAppRunError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ModelAppRunError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListApplicationTrafficsResponse parses an HTTP response from a ListApplicationTrafficsWithResponse call
func ParseListApplicationTrafficsResponse(rsp *http.Response) (*ListApplicationTrafficsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListApplicationTrafficsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HandlerListTraffics
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ModelAppRunError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ModelAppRunError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ModelAppRunError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ModelAppRunError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ModelAppRunError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutApplicationTrafficResponse parses an HTTP response from a PutApplicationTrafficWithResponse call
func ParsePutApplicationTrafficResponse(rsp *http.Response) (*PutApplicationTrafficResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApplicationTrafficResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HandlerPutTraffics
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ModelAppRunError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ModelAppRunError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ModelAppRunError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ModelAppRunError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ModelAppRunError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListApplicationVersionsResponse parses an HTTP response from a ListApplicationVersionsWithResponse call
func ParseListApplicationVersionsResponse(rsp *http.Response) (*ListApplicationVersionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListApplicationVersionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HandlerListVersions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ModelAppRunError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ModelAppRunError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ModelAppRunError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ModelAppRunError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ModelAppRunError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteApplicationVersionResponse parses an HTTP response from a DeleteApplicationVersionWithResponse call
func ParseDeleteApplicationVersionResponse(rsp *http.Response) (*DeleteApplicationVersionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApplicationVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ModelAppRunError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ModelAppRunError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ModelAppRunError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ModelAppRunError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ModelAppRunError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApplicationVersionResponse parses an HTTP response from a GetApplicationVersionWithResponse call
func ParseGetApplicationVersionResponse(rsp *http.Response) (*GetApplicationVersionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApplicationVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HandlerGetVersion
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ModelAppRunError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ModelAppRunError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ModelAppRunError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ModelAppRunError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ModelAppRunError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetUserResponse parses an HTTP response from a GetUserWithResponse call
func ParseGetUserResponse(rsp *http.Response) (*GetUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ModelAppRunError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ModelAppRunError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ModelAppRunError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ModelAppRunError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostUserResponse parses an HTTP response from a PostUserWithResponse call
func ParsePostUserResponse(rsp *http.Response) (*PostUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ModelAppRunError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ModelAppRunError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ModelAppRunError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ModelAppRunError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}
