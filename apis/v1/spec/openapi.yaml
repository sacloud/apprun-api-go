openapi: 3.0.0
info:
  version: 1.0.0
  title: さくらのAppRun β APIドキュメント
  contact:
    name: SAKURA internet Inc.
  license:
    name: Copyright(C) SAKURA internet Inc. all rights reserved.
  description: |-
    ---
    「さくらのAppRun」が提供するAPIの利用方法とサンプルを公開しております。

    # 基本的な使い方

    ## APIキーの発行

    APIを利用するためには、認証のための「APIキー」が必要です。事前にキーを発行しておきます。
    APIキーは「ユーザーID」「パスワード」に相当する「トークン」と呼ばれる認証情報で構成されています。

    |   項目名   | APIキー発行時の項目名        | このドキュメント内での例             |
    |------------|------------------------------|--------------------------------------|
    | ユーザーID | アクセストークン(UUID)       | 01234567-89ab-cdef-0123-456789abcdef |
    | パスワード | アクセストークンシークレット | SAMPLETOKENSAMPLETOKENSAMPLETOKENSAM |

    <div class="warning">
    <b>操作マニュアル</b><br />
    <ul><li><a href="https://manual.sakura.ad.jp/cloud/api/apikey.html">APIキー | さくらのクラウド ドキュメント</a></li></ul>
    </div>

    ## 入力パラメータ

    APIの入力には送信先URLに対して、いくつかのヘッダーとAPIキーを送信します。

    * 認証方式はHTTP Basic認証です。APIキーのアクセストークンをユーザーID、アクセストークンシークレットをパスワードとして指定します。

    ```
    # 入力サンプル
    curl -u '01234567-89ab-cdef-0123-456789abcdef:SAMPLETOKENSAMPLETOKENSAMPLETOKENSAM' \
         'https://secure.sakura.ad.jp/cloud/api/apprun/1.0/apprun/api/applications'
    ```

    ## 出力結果と応答コード（HTTPステータスコード）

    APIからの結果は、「応答コード（HTTPステータスコード）」と、「JSON形式(UTF-8)の結果」として出力されます。

    応答コードは、リクエストが成功したのか、失敗したのか大まかな情報を判断することができるもので、例えば失敗したときには、なぜこのような結果になったのかなど、具体的な情報は応答コードと主に返された本文を見ることで把握することができます。

    | 結果                                | 応答コード/status   |
    |-------------------------------------|---------------------|
    | 成功（要求を受け付けた）            | 2xx                 |
    | 失敗（要求が受け付けられなかった）  | 4xx, 5xx            |

    ```
    # 出力結果サンプル（レスポンスヘッダー）
    HTTP/1.1 200 OK
    Server: nginx
    Date: Tue, 16 Nov 2021 12:39:48 GMT
    Content-Type: application/json; charset=UTF-8
    Content-Length: 443
    Connection: keep-alive
    Status: 200 OK
    Pragma: no-cache
    Cache-Control: no-cache
    X-Sakura-Proxy-Microtime: 66245
    X-Sakura-Proxy-Decode-Microtime: 62
    X-Sakura-Content-Length: 443
    X-Sakura-Serial: 86ab6c743f72aa5ea6f17e254fd5f803
    X-Content-Type-Options: nosniff
    X-XSS-Protection: 1; mode=block
    X-Frame-Options: DENY
    X-Sakura-Encode-Microtime: 260
    Vary: Accept-Encoding
    ```

    ```
    # 出力結果サンプル（レスポンスボディー）
    {
      "error": {
        "code": 401,
        "message": "Login Required",
        "errors": [
          {
            "domain": "global",
            "reason": "required",
            "message": "Login Required",
            "location_type": "header",
            "location": "Authorization"
          }
        ]
      }
    }
    ```

    # 利用例

    ## 1.ユーザーの作成

    AppRunの利用を開始するには**ユーザー**を作成します。

    ユーザーとは、AppRunを利用するための独立したユーザーであり、ユーザー作成および削除による料金の発生はございません。
    なお、すでにユーザーを作成済みの場合は、再度ユーザーの作成は不要です。

    ユーザーを作成するには以下のような入力を行います。

    ```
    # 入力サンプル
    curl -u '01234567-89ab-cdef-0123-456789abcdef:SAMPLETOKENSAMPLETOKENSAMPLETOKENSAM' \
         -X POST \
         https://secure.sakura.ad.jp/cloud/api/apprun/1.0/apprun/api/user
    ```

    ユーザーの作成が完了すると、

    * アプリケーションの作成、更新、削除
    * バージョンの確認、削除
    * トラフィック分散の確認、変更

    などの操作が可能になります。

    ## 2.アプリケーションの作成、取得、更新、削除

    ユーザーを作成後、**アプリケーション**の作成、更新、削除が可能になります。

    アプリケーションを作成するには以下のような入力を行います。

    ```
    # 入力サンプル
    vi request_body.json
    cat request_body.json
    {
      "name": "Application",
      "timeout_seconds": 60,
      "port": 8080,
      "min_scale": 0,
      "max_scale": 1,
      "components": [
        {
          "name": "Component01",
          "max_cpu": "0.1",
          "max_memory": "256Mi",
          "datasource": {
            "container_registry": {
              "image": "my-app.sakuracr.jp/my-app:latest"
            }
          },
          "env": [
            {
              "key": "TARGET",
              "value": "World"
            }
          ],
          "probe": {
            "http_get": {
              "path": "/",
              "port": 8080,
              "headers": [
                {
                  "name": "Custom-Header",
                  "value": "Awesome"
                }
              ]
            }
          }
        }
      ]
    }
    curl -u '01234567-89ab-cdef-0123-456789abcdef:SAMPLETOKENSAMPLETOKENSAMPLETOKENSAM' \
         -X POST \
         -d '@request_body.json' \
         https://secure.sakura.ad.jp/cloud/api/apprun/1.0/apprun/api/applications
    ```

    上記で作成したアプリケーションを取得するには以下のような入力を行います。

    ```
    # 入力サンプル
    curl -u '01234567-89ab-cdef-0123-456789abcdef:SAMPLETOKENSAMPLETOKENSAMPLETOKENSAM' \
         -X GET \
         https://secure.sakura.ad.jp/cloud/api/apprun/1.0/apprun/api/applications/{id}
    ```

    上記で作成したアプリケーションを更新するには以下のような入力を行います。

    ```
    # 入力サンプル
    vi request_body.json
    cat request_body.json
    {
      "components": [
        {
          "name": "Component01 updated",
          "max_cpu": "0.1",
          "max_memory": "256Mi",
          "datasource": {
            "container_registry": {
              "image": "my-app.sakuracr.jp/my-app-v2:latest"
            }
          }
        }
      ],
      "all_traffic_available": true
    }

    curl -u '01234567-89ab-cdef-0123-456789abcdef:SAMPLETOKENSAMPLETOKENSAMPLETOKENSAM' \
         -X PATCH \
         -d '@request_body.json' \
         https://secure.sakura.ad.jp/cloud/api/apprun/1.0/apprun/api/applications/{id}
    ```

    上記で作成したアプリケーションを削除するには以下のような入力を行います。

    ```
    # 入力サンプル
    curl -u '01234567-89ab-cdef-0123-456789abcdef:SAMPLETOKENSAMPLETOKENSAMPLETOKENSAM' \
         -X DELETE \
         https://secure.sakura.ad.jp/cloud/api/apprun/1.0/apprun/api/applications/{id}
    ```

    ## 3.バージョンの取得、削除

    アプリケーションを作成、更新した際、その設定情報をバージョンとして保存します。

    バージョンを取得するには以下のような入力を行います。

    ```
    # 入力サンプル
    curl -u '01234567-89ab-cdef-0123-456789abcdef:SAMPLETOKENSAMPLETOKENSAMPLETOKENSAM' \
         -X GET \
         https://secure.sakura.ad.jp/cloud/api/apprun/1.0/apprun/api/applications/{id}/versions/{version_id}
    ```

    上記で作成したバージョンを削除するには以下のような入力を行います。

    ```
    # 入力サンプル
    curl -u '01234567-89ab-cdef-0123-456789abcdef:SAMPLETOKENSAMPLETOKENSAMPLETOKENSAM' \
         -X DELETE \
         https://secure.sakura.ad.jp/cloud/api/apprun/1.0/apprun/api/applications/{id}/versions/{version_id}
    ```

    ## 4.トラフィック分散の確認、変更

    アプリケーションは指定のバージョンへトラフィックを分散します。

    トラフィック分散を確認するには以下のような入力を行います。

    ```
    # 入力サンプル
    curl -u '01234567-89ab-cdef-0123-456789abcdef:SAMPLETOKENSAMPLETOKENSAMPLETOKENSAM' \
         -X GET \
         https://secure.sakura.ad.jp/cloud/api/apprun/1.0/apprun/api/applications/{id}/traffics
    ```

    トラフィック分散を変更するには以下のような入力を行います。

    ```
    # 入力サンプル
    vi request_body.json
    cat request_body.json
    [
      {
        "is_latest_version": true,
        "percent": 50
      },
      {
        "version_name": "Application-861850d6-8240-7c31-9b69-80ea4466918d-1726726814",
        "percent": 50
      }
    ]
    curl -u '01234567-89ab-cdef-0123-456789abcdef:SAMPLETOKENSAMPLETOKENSAMPLETOKENSAM' \
         -X PUT \
         https://secure.sakura.ad.jp/cloud/api/apprun/1.0/apprun/api/applications/{id}/traffics
    ```
    ----
servers:
  - url: https://secure.sakura.ad.jp/cloud/api/apprun/1.0/apprun/api
tags:
  - name: アプリケーション
    description: アプリケーションに関する情報
paths:
  /user:
    get:
      operationId: getUser
      tags:
        - ユーザー
      description: ログイン中のユーザー情報を取得します。
      responses:
        "200":
          description: ユーザー情報の取得に成功しました。
        "401":
          description: さくらのAppRunの認証に失敗しました。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/model.defaultError"
        "403":
          description: さくらのAppRunに対する権限がありません。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/model.defaultError"
        "404":
          description: さくらのAppRunにユーザーが存在しません
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/model.defaultError"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/model.defaultError"
    post:
      operationId: postUser
      tags:
        - ユーザー
      description: さくらのAppRunにサインアップします。
      responses:
        "201":
          description: サインアップに成功しました。
        "401":
          description: さくらのAppRunの認証に失敗しました。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/model.defaultError"
        "403":
          description: さくらのAppRunに対する権限がありません。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/model.defaultError"
        "409":
          description: さくらのAppRunにユーザーがすでに存在します。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/model.defaultError"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/model.defaultError"
  /applications:
    get:
      operationId: listApplications
      tags:
        - アプリケーション
      summary: アプリケーション一覧を取得します。
      description: さくらのAppRunのアプリケーション一覧を取得します。
      parameters:
        - in: query
          name: page_num
          schema:
            type: integer
            minimum: 1
            default: 1
          description: 表示したいページ番号
          required: false
          example: 20
        - in: query
          name: page_size
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
          description: 表示したい1ページあたりのサイズ
          required: false
          example: 10
        - in: query
          name: sort_field
          schema:
            type: string
            default: created_at
          description: ソートしたいフィールド名
          required: false
          example: created_at
        - in: query
          name: sort_order
          schema:
            type: string
            default: desc
            enum:
              - asc
              - desc
          description: ソート順（昇順、降順）
          required: false
          example: asc
      responses:
        "200":
          description: アプリケーション一覧の取得に成功しました。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/handler.listApplications"
        "400":
          description: リクエストが不正です。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/model.defaultError"
        "401":
          description: さくらのAppRunの認証に失敗しました。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/model.defaultError"
        "403":
          description: さくらのAppRunに対する権限がありません。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/model.defaultError"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/model.defaultError"
    post:
      operationId: postApplication
      tags:
        - アプリケーション
      summary: アプリケーションを作成します。
      description: さくらのAppRunにアプリケーションを作成します。
      requestBody:
        description: 作成するアプリケーションの情報を入力します。
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/postApplicationBody"
      responses:
        "201":
          description: アプリケーションの作成に成功しました。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/handler.postApplication"
        "400":
          description: リクエストが不正です。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/model.defaultError"
        "401":
          description: さくらのAppRunの認証に失敗しました。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/model.defaultError"
        "403":
          description: さくらのAppRunに対する権限がありません。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/model.defaultError"
        "409":
          description: アプリケーションが重複し作成が失敗しました。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/model.defaultError"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/model.defaultError"
  /applications/{id}:
    get:
      operationId: getApplication
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      tags:
        - アプリケーション
      summary: アプリケーション詳細を取得します。
      description: さくらのAppRunのアプリケーション詳細を取得します。
      responses:
        "200":
          description: アプリケーション詳細の取得に成功しました。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/handler.getApplication"
        "400":
          description: リクエストが不正です。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/model.defaultError"
        "401":
          description: さくらのAppRunの認証に失敗しました。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/model.defaultError"
        "403":
          description: さくらのAppRunに対する権限がありません。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/model.defaultError"
        "404":
          description: アプリケーションが見つかりませんでした。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/model.defaultError"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/model.defaultError"
    patch:
      operationId: patchApplication
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      tags:
        - アプリケーション
      summary: アプリケーションを部分的に変更します。
      description: さくらのAppRunのアプリケーションを部分的に変更します。
      requestBody:
        description: 部分的に変更するアプリケーションの情報を入力します。
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/patchApplicationBody"
      responses:
        "200":
          description: アプリケーションの変更に成功しました。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/handler.patchApplication"
        "400":
          description: リクエストが不正です。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/model.defaultError"
        "401":
          description: さくらのAppRunの認証に失敗しました。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/model.defaultError"
        "403":
          description: さくらのAppRunに対する権限がありません。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/model.defaultError"
        "404":
          description: アプリケーションが見つかりませんでした。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/model.defaultError"
        "409":
          description: アプリケーションが重複し作成が失敗しました。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/model.defaultError"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/model.defaultError"
    delete:
      operationId: deleteApplication
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      tags:
        - アプリケーション
      summary: アプリケーションを削除します。
      description: さくらのAppRunのアプリケーションを削除します。
      responses:
        "204":
          description: アプリケーションの削除に成功しました。
        "400":
          description: リクエストが不正です。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/model.defaultError"
        "401":
          description: さくらのAppRunの認証に失敗しました。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/model.defaultError"
        "403":
          description: さくらのAppRunに対する権限がありません。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/model.defaultError"
        "404":
          description: アプリケーションが見つかりませんでした。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/model.defaultError"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/model.defaultError"
  /applications/{id}/status:
    get:
      operationId: getApplicationStatus
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      tags:
        - アプリケーション
      summary: アプリケーションステータスを取得します。
      description: さくらのAppRunのアプリケーションステータスを取得します。
      responses:
        "200":
          description: アプリケーションステータスの取得に成功しました。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/handler.getApplicationStatus"
        "400":
          description: リクエストが不正です。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/model.defaultError"
        "401":
          description: さくらのAppRunの認証に失敗しました。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/model.defaultError"
        "403":
          description: さくらのAppRunに対する権限がありません。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/model.defaultError"
        "404":
          description: アプリケーションが見つかりませんでした。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/model.defaultError"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/model.defaultError"
  /applications/{id}/traffics:
    get:
      operationId: listApplicationTraffics
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      tags:
        - トラフィック
      summary: アプリケーショントラフィック分散を取得します。
      description: さくらのAppRunのアプリケーショントラフィック分散を取得します。
      responses:
        "200":
          description: アプリケーショントラフィック分散の取得に成功しました。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/handler.listTraffics"
        "400":
          description: リクエストが不正です。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/model.defaultError"
        "401":
          description: さくらのAppRunの認証に失敗しました。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/model.defaultError"
        "403":
          description: さくらのAppRunに対する権限がありません。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/model.defaultError"
        "404":
          description: アプリケーションが見つかりませんでした。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/model.defaultError"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/model.defaultError"
    put:
      operationId: putApplicationTraffic
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      tags:
        - トラフィック
      summary: アプリケーショントラフィック分散を変更します。
      description: さくらのAppRunのアプリケーショントラフィック分散を変更します。
      requestBody:
        description: |
          トラフィック分散の割合を入力します。
          version_nameまたはis_latest_versionのどちらかを指定して何％の割合でトラフィックを転送するかを入力します。
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/putTrafficsBody"
      responses:
        "200":
          description: アプリケーショントラフィック分散の変更に成功しました。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/handler.putTraffics"
        "400":
          description: リクエストが不正です。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/model.defaultError"
        "401":
          description: さくらのAppRunの認証に失敗しました。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/model.defaultError"
        "403":
          description: さくらのAppRunに対する権限がありません。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/model.defaultError"
        "404":
          description: アプリケーションが見つかりませんでした。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/model.defaultError"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/model.defaultError"
  /applications/{id}/versions:
    get:
      operationId: listApplicationVersions
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
        - in: query
          name: page_num
          schema:
            type: integer
            minimum: 1
            default: 1
          description: 表示したいページ番号
          required: false
          example: 20
        - in: query
          name: page_size
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
          description: 表示したい1ページあたりのサイズ
          required: false
          example: 10
        - in: query
          name: sort_field
          schema:
            type: string
            default: created_at
          description: ソートしたいフィールド名
          required: false
          example: created_at
        - in: query
          name: sort_order
          schema:
            type: string
            default: desc
            enum:
              - asc
              - desc
          description: ソート順（昇順、降順）
          required: false
          example: asc
      tags:
        - バージョン
      summary: アプリケーションバージョン一覧を取得します。
      description: さくらのAppRunのアプリケーションバージョン一覧を取得します。
      responses:
        "200":
          description: アプリケーションバージョン一覧の取得に成功しました。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/handler.listVersions"
        "400":
          description: リクエストが不正です。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/model.defaultError"
        "401":
          description: さくらのAppRunの認証に失敗しました。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/model.defaultError"
        "403":
          description: さくらのAppRunに対する権限がありません。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/model.defaultError"
        "404":
          description: アプリケーションバージョンが見つかりませんでした。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/model.defaultError"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/model.defaultError"
  /applications/{id}/versions/{version_id}:
    get:
      operationId: getApplicationVersion
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
        - in: path
          name: version_id
          schema:
            type: string
          required: true
      tags:
        - バージョン
      summary: アプリケーションバージョン詳細を取得します。
      description: さくらのAppRunのアプリケーションバージョン詳細を取得します。
      responses:
        "200":
          description: アプリケーションバージョン詳細の取得に成功しました。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/handler.getVersion"
        "400":
          description: リクエストが不正です。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/model.defaultError"
        "401":
          description: さくらのAppRunの認証に失敗しました。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/model.defaultError"
        "403":
          description: さくらのAppRunに対する権限がありません。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/model.defaultError"
        "404":
          description: アプリケーションバージョンが見つかりませんでした。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/model.defaultError"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/model.defaultError"
    delete:
      operationId: deleteApplicationVersion
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
        - in: path
          name: version_id
          schema:
            type: string
          required: true
      tags:
        - バージョン
      summary: アプリケーションバージョンを削除します。
      description: さくらのAppRunのアプリケーションバージョンを削除します。
      responses:
        "204":
          description: アプリケーションバージョンの削除に成功しました。
        "400":
          description: リクエストが不正です。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/model.defaultError"
        "401":
          description: さくらのAppRunの認証に失敗しました。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/model.defaultError"
        "403":
          description: さくらのAppRunに対する権限がありません。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/model.defaultError"
        "404":
          description: アプリケーションバージョンが見つかりませんでした。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/model.defaultError"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/model.defaultError"
components:
  schemas:
    handler.listApplications:
      type: object
      properties:
        meta:
          $ref: "#/components/schemas/handler.listApplicationsMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/handler.listApplicationsData"
    # handler.listApplicationsから切り出した
    handler.listApplicationsMeta:
      type: object
      properties:
        page_num:
          type: integer
          example: 1
        page_size:
          type: integer
          example: 100
        object_total:
          type: integer
          example: 1000
        sort_field:
          type: string
          example: created_at
        sort_order:
          type: string
          example: asc
          enum:
            - asc
            - desc
    handler.listApplicationsData:
      type: object
      properties:
        id:
          description: アプリケーションID
          type: string
          example: u8FXIJ2LVM3wXVyzOEi
        name:
          description: アプリケーション名
          type: string
          example: アプリケーション1
        status:
          description: アプリケーションステータス
          type: string
          example: Success
          enum:
            - Success
            - Fail
            - Unknown
        public_url:
          description: 公開URL
          type: string
          example: https://fq1I4vpQkN1YiGp.apprun.sakura.ne.jp
        created_at:
          description: 作成日時
          type: string
          format: date-time
    handler.postApplication:
      $ref: "#/components/schemas/Application"
    handler.getApplication:
      $ref: "#/components/schemas/Application"
    handler.patchApplication:
      type: object
      properties:
        id:
          description: アプリケーションID
          type: string
          example: u8FXIJ2LVM3wXVyzOEi
        name:
          description: アプリケーション名
          type: string
          example: アプリケーション1
        timeout_seconds:
          description: アプリケーションの公開URLにアクセスして、インスタンスが起動してからレスポンスが返るまでの時間制限
          type: integer
          example: 60
          minimum: 1
          maximum: 300
        port:
          description: アプリケーションがリクエストを待ち受けるポート番号
          type: integer
          example: 8080
          minimum: 1
          maximum: 65535
        min_scale:
          description: アプリケーション全体の最小スケール数
          type: integer
          example: 0
          minimum: 0
          maximum: 0
        max_scale:
          description: アプリケーション全体の最大スケール数
          type: integer
          example: 2
          minimum: 1
          maximum: 10
        components:
          description: アプリケーションのコンポーネント情報
          type: array
          items:
            $ref: "#/components/schemas/handler.ApplicationComponent"
        status:
          description: アプリケーションステータス
          type: string
          example: Success
          enum:
            - Success
            - Fail
            - Unknown
        public_url:
          description: 公開URL
          type: string
          example: https://fq1I4vpQkN1YiGp.apprun.sakura.ne.jp
        updated_at:
          description: 更新日時
          type: string
          format: date-time
    handler.getApplicationStatus:
      type: object
      x-go-name: HandlerGetApplicationStatusResponse
      properties:
        status:
          description: アプリケーションステータス
          type: string
          example: Success
          enum:
            - Success
            - Fail
            - Unknown
        message:
          description: ステータス失敗時のメッセージ
          type: string
          example: Failed to authenticate with the registry
    handler.listVersions:
      type: object
      properties:
        meta:
          $ref: "#/components/schemas/handler.listVersionsMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/Version"
    # handler.listVersionsから切り出した
    handler.listVersionsMeta:
      type: object
      properties:
        page_num:
          type: integer
          example: 1
        page_size:
          type: integer
          example: 100
        object_total:
          type: integer
          example: 1000
        sort_field:
          type: string
          example: created_at
        sort_order:
          type: string
          example: asc
          enum:
            - asc
            - desc
    Version:
      type: object
      properties:
        id:
          description: バージョンID
          type: string
          example: BIi7jHVWGjg7NaxcK
        name:
          description: バージョン名
          type: string
          example: version-001
        status:
          description: ステータス
          type: string
          example: Success
          enum:
            - Success
            - Fail
            - Unknown
        created_at:
          description: 作成日時
          type: string
          format: date-time
    handler.getVersion:
      type: object
      properties:
        id:
          description: バージョンID
          type: string
          example: BIi7jHVWGjg7NaxcK
        name:
          description: バージョン名
          type: string
          example: version-001
        status:
          description: バージョンステータス
          type: string
          example: Success
          enum:
            - Success
            - Fail
            - Unknown
        timeout_seconds:
          description: アプリケーションの公開URLにアクセスして、インスタンスが起動してからレスポンスが返るまでの時間制限
          type: integer
          example: 60
          default: 60
          minimum: 1
          maximum: 300
        port:
          description: アプリケーションがリクエストを待ち受けるポート番号
          type: integer
          example: 8080
          minimum: 1
          maximum: 65535
        min_scale:
          description: バージョンの最小スケール数
          type: integer
          example: 0
          default: 0
          minimum: 0
          maximum: 0
        max_scale:
          description: バージョンの最大スケール数
          type: integer
          example: 2
          default: 10
          minimum: 1
          maximum: 10
        components:
          description: バージョンのコンポーネント情報
          type: array
          items:
            type: object
            required:
              - name
              - max_cpu
              - max_memory
              - datasource
            properties:
              name:
                description: コンポーネント名
                type: string
                example: コンポーネント1
              max_cpu:
                description: コンポーネントの最大CPU数
                type: string
                example: "0.1"
              max_memory:
                description: コンポーネントの最大メモリ
                type: string
                example: 256Mi
              datasource:
                description: コンポーネントを構成するソース
                type: object
                properties:
                  container_registry:
                    description: コンテナレジストリ
                    type: object
                    required:
                      - image
                    properties:
                      image:
                        description: コンテナイメージ名
                        type: string
                        example: apprun-example.sakuracr.jp/helloworld:latest
                      server:
                        description: コンテナレジストリのサーバー名
                        type: string
                        example: apprun-example.sakuracr.jp
                      username:
                        description: コンテナレジストリの認証情報
                        type: string
                        example: apprun
              env:
                description: コンポーネントに渡す環境変数
                type: array
                items:
                  type: object
                  properties:
                    key:
                      description: 環境変数名
                      type: string
                      example: MY_ENV
                    value:
                      description: 環境変数の値
                      type: string
                      example: my_value
              probe:
                description: コンポーネントのプローブ設定
                type: object
                nullable: true
                properties:
                  http_get:
                    description: HTTP Getプローブタイプ
                    type: object
                    required:
                      - path
                      - port
                    nullable: true
                    properties:
                      path:
                        description: HTTPサーバーへアクセスしプローブをチェックする際のパス
                        type: string
                        example: /healthz
                      port:
                        description: HTTPサーバーへアクセスしプローブをチェックする際のポート番号
                        type: integer
                        example: 8080
                        minimum: 1
                        maximum: 65535
                      headers:
                        type: array
                        items:
                          type: object
                          properties:
                            name:
                              description: ヘッダーフィールド名
                              type: string
                              example: Custom-Header
                            value:
                              description: ヘッダーフィールド値
                              type: string
                              example: Awesome
        created_at:
          description: 作成日時
          type: string
          format: date-time
    handler.listTraffics:
      type: object
      properties:
        meta:
          type: object
          nullable: true
          example: null
        data:
          type: array
          items:
            type: object
            properties:
              version_name:
                description: バージョン名
                type: string
                example: Version1
              is_latest_version:
                description: 最新バージョンかどうか
                type: boolean
              percent:
                description: トラフィック分散の割合
                type: integer
                example: 100
    handler.putTraffics:
      type: object
      properties:
        meta:
          type: object
          nullable: true
          example: null
        data:
          type: array
          items:
            type: object
            properties:
              version_name:
                description: バージョン名
                type: string
                example: Version1
              is_latest_version:
                description: 最新バージョンかどうか
                type: boolean
              percent:
                description: トラフィック分散の割合
                type: integer
                example: 100
    postApplicationBody:
      type: object
      required:
        - name
        - timeout_seconds
        - port
        - min_scale
        - max_scale
        - components
      properties:
        name:
          description: アプリケーション名
          type: string
          example: アプリケーション1
          minLength: 1
          maxLength: 255
        timeout_seconds:
          description: アプリケーションの公開URLにアクセスして、インスタンスが起動してからレスポンスが返るまでの時間制限
          type: integer
          example: 60
          default: 60
          minimum: 1
          maximum: 300
        port:
          description: アプリケーションがリクエストを待ち受けるポート番号
          type: integer
          example: 8080
          minimum: 1
          maximum: 65535
        min_scale:
          description: アプリケーション全体の最小スケール数
          type: integer
          example: 0
          default: 0
          minimum: 0
          maximum: 0
        max_scale:
          description: アプリケーション全体の最大スケール数
          type: integer
          example: 2
          default: 10
          minimum: 1
          maximum: 10
        components:
          description: アプリケーションのコンポーネント情報
          type: array
          items:
            $ref: "#/components/schemas/postApplicationBodyComponent"
    # postApplicationBodyから切り出した
    postApplicationBodyComponent:
      type: object
      required:
        - name
        - max_cpu
        - max_memory
        - datasource
      properties:
        name:
          description: コンポーネント名
          type: string
          example: コンポーネント1
          minLength: 1
          maxLength: 255
        max_cpu:
          description: コンポーネントの最大CPU数
          type: string
          example: "0.1"
          enum:
            - "0.1"
            - "0.2"
            - "0.3"
            - "0.4"
            - "0.5"
            - "0.6"
            - "0.7"
            - "0.8"
            - "0.9"
            - "1"
        max_memory:
          description: コンポーネントの最大メモリ
          type: string
          example: 256Mi
          enum:
            - 256Mi
            - 512Mi
            - 1Gi
            - 2Gi
        datasource:
          description: コンポーネントを構成するソース
          $ref: "#/components/schemas/postApplicationBodyComponentDataSource"
        env:
          description: コンポーネントに渡す環境変数
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/postApplicationBodyComponentEnv"
        probe:
          description: コンポーネントのプローブ設定
          $ref: "#/components/schemas/postApplicationBodyComponentProbe"
    postApplicationBodyComponentDataSource:
      type: object
      properties:
        container_registry:
          description: コンテナレジストリ
          $ref: "#/components/schemas/postApplicationBodyComponentDataSourceContainerRegistry"
    postApplicationBodyComponentDataSourceContainerRegistry:
      type: object
      required:
        - image
      properties:
        image:
          description: コンテナイメージ名
          type: string
          example: apprun-example.sakuracr.jp/helloworld:latest
          minLength: 1
          maxLength: 128
        server:
          description: コンテナレジストリのサーバー名
          type: string
          example: apprun-example.sakuracr.jp
          minLength: 1
          maxLength: 128
          nullable: true
        username:
          description: コンテナレジストリの認証情報
          type: string
          example: apprun
          minLength: 1
          maxLength: 63
          nullable: true
        password:
          description: コンテナレジストリの認証情報
          type: string
          example: apprun
          minLength: 1
          maxLength: 63
          nullable: true
    postApplicationBodyComponentEnv:
      type: object
      properties:
        key:
          description: 環境変数名
          type: string
          example: MY_ENV
        value:
          description: 環境変数の値
          type: string
          example: my_value
    postApplicationBodyComponentProbe:
      type: object
      nullable: true
      properties:
        http_get:
          description: HTTP Getプローブタイプ
          type: object
          required:
            - path
            - port
          nullable: true
          properties:
            path:
              description: HTTPサーバーへアクセスしプローブをチェックする際のパス
              type: string
              example: /healthz
            port:
              description: HTTPサーバーへアクセスしプローブをチェックする際のポート番号
              type: integer
              example: 8080
              minimum: 1
              maximum: 65535
            headers:
              type: array
              items:
                type: object
                properties:
                  name:
                    description: ヘッダーフィールド名
                    type: string
                    example: Custom-Header
                  value:
                    description: ヘッダーフィールド値
                    type: string
                    example: Awesome
    patchApplicationBody:
      type: object
      properties:
        name:
          description: アプリケーション名
          type: string
          example: アプリケーション1
          minLength: 1
          maxLength: 255
        timeout_seconds:
          description: アプリケーションの公開URLにアクセスして、インスタンスが起動してからレスポンスが返るまでの時間制限
          type: integer
          example: 60
          minimum: 1
          maximum: 300
        port:
          description: アプリケーションがリクエストを待ち受けるポート番号
          type: integer
          example: 8080
          minimum: 1
          maximum: 65535
        min_scale:
          description: アプリケーション全体の最小スケール数
          type: integer
          example: 0
          minimum: 0
          maximum: 0
        max_scale:
          description: アプリケーション全体の最大スケール数
          type: integer
          example: 2
          minimum: 1
          maximum: 10
        components:
          description: アプリケーションのコンポーネント情報
          type: array
          items:
            $ref: "#/components/schemas/patchApplicationBodyComponent"
        all_traffic_available:
          description: アプリケーションを最新のバージョンにすべてのトラフィックを割り当てるかどうか
          type: boolean
    # patchApplicationBodyから切り出した
    patchApplicationBodyComponent:
      type: object
      required:
        - name
        - max_cpu
        - max_memory
        - datasource
      properties:
        name:
          description: コンポーネント名
          type: string
          example: コンポーネント1
          minLength: 1
          maxLength: 255
        max_cpu:
          description: コンポーネントの最大CPU数
          type: string
          example: "0.1"
          enum:
            - "0.1"
            - "0.2"
            - "0.3"
            - "0.4"
            - "0.5"
            - "0.6"
            - "0.7"
            - "0.8"
            - "0.9"
            - "1"
        max_memory:
          description: コンポーネントの最大メモリ
          type: string
          example: 256Mi
          enum:
            - 256Mi
            - 512Mi
            - 1Gi
            - 2Gi
        datasource:
          description: コンポーネントを構成するソース
          $ref: "#/components/schemas/patchApplicationBodyComponentDataSource"
        env:
          description: コンポーネントに渡す環境変数
          $ref: "#/components/schemas/patchApplicationBodyComponentEnv"
        probe:
          description: コンポーネントのプローブ設定
          $ref: "#/components/schemas/patchApplicationBodyComponentProbe"
    patchApplicationBodyComponentDataSource:
      type: object
      properties:
        container_registry:
          description: コンテナレジストリ
          $ref: "#/components/schemas/patchApplicationBodyComponentDataSourceContainerRegistry"
    patchApplicationBodyComponentDataSourceContainerRegistry:
      type: object
      required:
        - image
      properties:
        image:
          description: コンテナイメージ名
          type: string
          example: apprun-example.sakuracr.jp/helloworld:latest
          minLength: 1
          maxLength: 128
        server:
          description: コンテナレジストリのサーバー名
          type: string
          example: apprun-example.sakuracr.jp
          minLength: 1
          maxLength: 128
          nullable: true
        username:
          description: コンテナレジストリの認証情報
          type: string
          example: apprun
          minLength: 1
          maxLength: 63
          nullable: true
        password:
          description: コンテナレジストリの認証情報
          type: string
          example: apprun
          minLength: 1
          maxLength: 63
          nullable: true
    patchApplicationBodyComponentEnv:
      type: array
      nullable: true
      items:
        type: object
        properties:
          key:
            description: 環境変数名
            type: string
            example: MY_ENV
          value:
            description: 環境変数の値
            type: string
            example: my_value
    patchApplicationBodyComponentProbe:
      type: object
      nullable: true
      properties:
        http_get:
          description: HTTP Getプローブタイプ
          type: object
          required:
            - path
            - port
          nullable: true
          properties:
            path:
              description: HTTPサーバーへアクセスしプローブをチェックする際のパス
              type: string
              example: /healthz
            port:
              description: HTTPサーバーへアクセスしプローブをチェックする際のポート番号
              type: integer
              example: 8080
              minimum: 1
              maximum: 65535
            headers:
              type: array
              items:
                type: object
                properties:
                  name:
                    description: ヘッダーフィールド名
                    type: string
                    example: Custom-Header
                  value:
                    description: ヘッダーフィールド値
                    type: string
                    example: Awesome
    putTrafficsBody:
      type: array
      items:
        type: object
        properties:
          version_name:
            description: バージョン名
            type: string
            example: Version1
          is_latest_version:
            description: 最新バージョンかどうか
            type: boolean
          percent:
            description: トラフィック分散の割合
            type: integer

    # handler.postApplication, handler.getApplication, handler.patchApplicationの共通化
    Application:
      type: object
      properties:
        id:
          description: アプリケーションID
          type: string
          example: u8FXIJ2LVM3wXVyzOEi
        name:
          description: アプリケーション名
          type: string
          example: アプリケーション1
        timeout_seconds:
          description: アプリケーションの公開URLにアクセスして、インスタンスが起動してからレスポンスが返るまでの時間制限
          type: integer
          example: 60
          default: 60
          minimum: 1
          maximum: 300
        port:
          description: アプリケーションがリクエストを待ち受けるポート番号
          type: integer
          example: 8080
          minimum: 1
          maximum: 65535
        min_scale:
          description: アプリケーション全体の最小スケール数
          type: integer
          example: 0
          default: 0
          minimum: 0
          maximum: 0
        max_scale:
          description: アプリケーション全体の最大スケール数
          type: integer
          example: 2
          default: 10
          minimum: 1
          maximum: 10
        components:
          description: アプリケーションのコンポーネント情報
          type: array
          items:
            $ref: "#/components/schemas/handler.ApplicationComponent"
        status:
          description: アプリケーションステータス
          type: string
          example: Success
          enum:
            - Success
            - Fail
            - Unknown
        public_url:
          description: 公開URL
          type: string
          example: https://fq1I4vpQkN1YiGp.apprun.sakura.ne.jp
        created_at:
          description: 作成日時
          type: string
          format: date-time
    handler.ApplicationComponent:
      type: object
      required:
        - name
        - max_cpu
        - max_memory
        - datasource
      properties:
        name:
          description: コンポーネント名
          type: string
          example: コンポーネント1
        max_cpu:
          description: コンポーネントの最大CPU数
          type: string
          example: "0.1"
        max_memory:
          description: コンポーネントの最大メモリ
          type: string
          example: 256Mi
        datasource:
          description: コンポーネントを構成するソース
          $ref: "#/components/schemas/handler.ApplicationComponentDataSource"
        env:
          description: コンポーネントに渡す環境変数
          type: array
          items:
            $ref: "#/components/schemas/handler.ApplicationComponentEnv"
        probe:
          description: コンポーネントのプローブ設定
          $ref: "#/components/schemas/handler.ApplicationComponentProbe"
    handler.ApplicationComponentDataSource:
      type: object
      properties:
        container_registry:
          description: コンテナレジストリ
          $ref: "#/components/schemas/handler.ApplicationComponentDataSourceContainerRegistry"
    handler.ApplicationComponentDataSourceContainerRegistry:
      type: object
      required:
        - image
      properties:
        image:
          description: コンテナイメージ名
          type: string
          example: apprun-example.sakuracr.jp/helloworld:latest
        server:
          description: コンテナレジストリのサーバー名
          type: string
          example: apprun-example.sakuracr.jp
        username:
          description: コンテナレジストリの認証情報
          type: string
          example: apprun
    handler.ApplicationComponentEnv:
      type: object
      properties:
        key:
          description: 環境変数名
          type: string
          example: MY_ENV
        value:
          description: 環境変数の値
          type: string
          example: my_value
    handler.ApplicationComponentProbe:
      type: object
      nullable: true
      properties:
        http_get:
          description: HTTP Getプローブタイプ
          type: object
          required:
            - path
            - port
          nullable: true
          properties:
            path:
              description: HTTPサーバーへアクセスしプローブをチェックする際のパス
              type: string
              example: /healthz
            port:
              description: HTTPサーバーへアクセスしプローブをチェックする際のポート番号
              type: integer
              example: 8080
              minimum: 1
              maximum: 65535
            headers:
              type: array
              items:
                type: object
                properties:
                  name:
                    description: ヘッダーフィールド名
                    type: string
                    example: Custom-Header
                  value:
                    description: ヘッダーフィールド値
                    type: string
                    example: Awesome

    model.defaultError:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: number
              example: 401
            message:
              type: string
              example: Login Required
            errors:
              $ref: "#/components/schemas/model.errors"
    model.errors:
      type: array
      items:
        type: object
        properties:
          domain:
            type: string
            example: global
            nullable: true
          reason:
            type: string
            example: required
            nullable: true
          message:
            type: string
            example: Login Required
            nullable: true
          location_type:
            type: string
            example: header
            enum:
              - header
              - body
              - query
              - parameter
            nullable: true
          location:
            type: string
            example: Authorization
            nullable: true
